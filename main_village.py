import pyautogui
import time
import cv2
import numpy as np
from PIL import ImageGrab
import keyboard


class ClashBot:
    def __init__(self):
        # ‚öôÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –µ–º—É–ª—è—Ç–æ—Ä—ñ
        self.coords = {
            'attack': (369, 827),
            'find_match': (1247, 582),
            'return_home': (978, 798),
            'next': (1544, 720),
            'choice': (702, 829),
            # –ü–æ–∑–∏—Ü—ñ—ó –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–π—Å—å–∫
            'deploy_positions': {
                'ground_troops': [(1267, 171), (1387, 285), (1539, 395), (1570, 582), (1316, 255)],
                'spells': [(967, 267), (1123, 379), (1264, 493), (1389, 589), (1047, 460)],
                'heavy_troops': [(1188, 181)]
            }
        }

        # –ö–ª–∞–≤—ñ—à—ñ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–π—Å—å–∫ (1, 2, 3, 4, 5, 6...)
        self.troop_keys = {
            'electro': '1',
            'king': 'r',
            'queen': 'e',
            'warder': 'w',
            'champion': 'q',
            'rage': 'a',
            'barracks': 'z'
        }

        # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –∞—Ç–∞–∫–∏: —Ç–∏–ø –≤—ñ–π—Å—å–∫–∞ + –ø–æ–∑–∏—Ü—ñ—ó
        self.attack_strategy = [
            {'troop': 'electro', 'key': '1', 'positions': 'ground_troops', 'clicks_per_position': 2},
            {'troop': 'king', 'key': 'r', 'positions': 'heavy_troops', 'clicks_per_position': 1},
            {'troop': 'queen', 'key': 'e', 'positions': 'heavy_troops', 'clicks_per_position': 1},
            {'troop': 'warder', 'key': 'w', 'positions': 'heavy_troops', 'clicks_per_position': 1},
            {'troop': 'champion', 'key': 'q', 'positions': 'heavy_troops', 'clicks_per_position': 1},
            {'troop': 'barracks', 'key': 'z', 'positions': 'heavy_troops', 'clicks_per_position': 1},
            {'troop': 'rage', 'key': 'a', 'positions': 'spells', 'clicks_per_position': 1}
        ]

    def click_button(self, position, delay=1):
        """–ö–ª—ñ–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é"""
        pyautogui.click(position)
        time.sleep(delay)
        print(f"üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {position}")

    def wait_for_template(self, template_path, threshold=0.8, timeout=60):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è–≤–∏ —à–∞–±–ª–æ–Ω—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                screenshot = np.array(ImageGrab.grab())
                gray = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)
                template = cv2.imread(template_path, 0)

                if template is None:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω: {template_path}")
                    return False

                result = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)
                _, max_val, _, max_loc = cv2.minMaxLoc(result)

                if max_val >= threshold:
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω: {template_path}")
                    return True
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —à–∞–±–ª–æ–Ω—É: {e}")

            time.sleep(2)

        print(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ {timeout}—Å: {template_path}")
        return False

    def start_attack(self):
        """–ü–æ—á–∞—Ç–æ–∫ –∞—Ç–∞–∫–∏"""
        print("üü¢ –ü–æ—á–∞—Ç–æ–∫ –∞—Ç–∞–∫–∏")
        self.click_button(self.coords['attack'], delay=1)

    def find_match(self):
        """–ü–æ—à—É–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
        print("üîç –ü–æ—à—É–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
        self.click_button(self.coords['find_match'], delay=2)

    def wait_for_battle_start(self):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –±–∏—Ç–≤–∏"""
        print("üïµÔ∏è –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ–ª–∞...")
        self.wait_for_template("screenshots/next.jpg", timeout=60)

    def select_troop(self, troop_type=None, key=None):
        """–í–∏–±—ñ—Ä —Ç–∏–ø—É –≤—ñ–π—Å—å–∫–∞ –∑–∞ –∫–ª–∞–≤—ñ—à–µ—é"""
        if key:
            # –í–∏–±—ñ—Ä –∑–∞ –∫–ª–∞–≤—ñ—à–µ—é
            print(f"‚å®Ô∏è –í–∏–±—ñ—Ä –≤—ñ–π—Å—å–∫–∞ –∫–ª–∞–≤—ñ—à–µ—é: {key}")
            keyboard.press_and_release(key)
            time.sleep(0.3)
            return True
        elif troop_type and troop_type in self.troop_keys:
            # –í–∏–±—ñ—Ä –∑–∞ —Ç–∏–ø–æ–º –≤—ñ–π—Å—å–∫–∞
            key_to_press = self.troop_keys[troop_type]
            print(f"‚å®Ô∏è –í–∏–±—ñ—Ä –≤—ñ–π—Å—å–∫–∞ {troop_type} –∫–ª–∞–≤—ñ—à–µ—é: {key_to_press}")
            keyboard.press_and_release(key_to_press)
            time.sleep(0.3)
            return True
        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≤—ñ–π—Å—å–∫–∞ –∞–±–æ –∫–ª–∞–≤—ñ—à–∞: {troop_type}/{key}")
            return False

    def deploy_troops(self, positions_key, clicks_per_position=1):
        """–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫ –ø–æ –∑–∞–¥–∞–Ω–∏–º –ø–æ–∑–∏—Ü—ñ—è–º"""
        if positions_key in self.coords['deploy_positions']:
            positions = self.coords['deploy_positions'][positions_key]
            print(f"‚öîÔ∏è –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫ –ø–æ –ø–æ–∑–∏—Ü—ñ—è—Ö: {positions_key}")

            for pos in positions:
                for _ in range(clicks_per_position):
                    pyautogui.click(pos)
                    time.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–∑–∏—Ü—ñ—è–º–∏
        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º—ñ –ø–æ–∑–∏—Ü—ñ—ó: {positions_key}")

    def execute_attack_strategy(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∞—Ç–∞–∫–∏"""
        print("‚öîÔ∏è –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∞—Ä–º—ñ—ó –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é")

        for step in self.attack_strategy:
            troop_type = step['troop']
            key = step.get('key')  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞–≤—ñ—à—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
            positions = step['positions']
            clicks = step['clicks_per_position']

            # –í–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–ø –≤—ñ–π—Å—å–∫–∞ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∫–ª–∞–≤—ñ—à—ñ)
            if self.select_troop(troop_type=troop_type, key=key):
                # –†–æ–∑–º—ñ—â—É—î–º–æ –≤—ñ–π—Å—å–∫–æ
                self.deploy_troops(positions, clicks)
                time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≤—ñ–π—Å—å–∫
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {troop_type} - –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏")

    def wait_for_battle_end(self):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∏—Ç–≤–∏"""
        print("üïì –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é...")
        if self.wait_for_template("screenshots/return_home.jpg", timeout=180):
            print("‚úÖ –ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return True
        else:
            print("‚ö†Ô∏è –ë–∏—Ç–≤–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤—á–∞—Å–Ω–æ")
            return False

    def return_home(self):
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ–¥–æ–º—É"""
        print("üè† –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ–¥–æ–º—É")
        self.click_button(self.coords['return_home'], delay=3)

    def wait_before_next_attack(self, delay=5):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∞—Ç–∞–∫–æ—é"""
        print(f"üîÅ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {delay}—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∞—Ç–∞–∫–æ—é...")
        time.sleep(delay)

    def full_attack_cycle(self):
        """–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏"""
        try:
            # 1. –ü–æ—á–∞—Ç–æ–∫ –∞—Ç–∞–∫–∏
            self.start_attack()

            # 2. –ü–æ—à—É–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            self.find_match()

            # 3. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –±–∏—Ç–≤–∏
            self.wait_for_battle_start()

            # 4. –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∞—Ç–∞–∫–∏
            self.execute_attack_strategy()

            # 5. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∏—Ç–≤–∏
            if self.wait_for_battle_end():
                # 6. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ–¥–æ–º—É
                self.return_home()
            else:
                print("‚ö†Ô∏è –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–∏—Ç–≤–∏")
                self.return_home()

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞—Ç–∞–∫–∏: {e}")
            return False

    def run_bot(self, max_attacks=None):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∞—Ç–∞–∫"""
        attack_count = 0

        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Clash of Clans")
        print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –∞—Ç–∞–∫–∏: {len(self.attack_strategy)} —Ç–∏–ø—ñ–≤ –≤—ñ–π—Å—å–∫")

        while True:
            try:
                attack_count += 1
                print(f"\nüîÑ –ê—Ç–∞–∫–∞ #{attack_count}")

                # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏
                success = self.full_attack_cycle()

                if success:
                    print(f"‚úÖ –ê—Ç–∞–∫–∞ #{attack_count} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è –ê—Ç–∞–∫–∞ #{attack_count} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ç–∞–∫
                if max_attacks and attack_count >= max_attacks:
                    print(f"üèÅ –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫: {max_attacks}")
                    break

                # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∞—Ç–∞–∫–æ—é
                self.wait_before_next_attack(30)

            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                print("üîÑ –°–ø—Ä–æ–±–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)


# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
if __name__ == "__main__":
    time.sleep(5)
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ClashBot()

    # –ú–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
    # bot.attack_strategy = [
    #     {'troop': 'dragon', 'key': '5', 'positions': 'heavy_troops', 'clicks_per_position': 1},
    #     {'troop': 'wizard', 'key': '4', 'positions': 'ranged_troops', 'clicks_per_position': 3}
    # ]

    # –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–ª–∞–≤—ñ—à—ñ –±–µ–∑ –Ω–∞–∑–≤ –≤—ñ–π—Å—å–∫:
    # bot.attack_strategy = [
    #     {'troop': 'troop1', 'key': '1', 'positions': 'ground_troops', 'clicks_per_position': 3},
    #     {'troop': 'troop2', 'key': '2', 'positions': 'ranged_troops', 'clicks_per_position': 4}
    # ]

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot.run_bot()  # –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª
    # bot.run_bot(max_attacks=5)  # –û–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫